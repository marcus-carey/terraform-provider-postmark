// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_webhook

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func WebhookDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"bounce_trigger": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"enabled": schema.BoolAttribute{
						Computed:            true,
						Description:         "Specifies whether or not bounce webhook is enabled.",
						MarkdownDescription: "Specifies whether or not bounce webhook is enabled.",
					},
					"include_content": schema.BoolAttribute{
						Computed:            true,
						Description:         "Specifies whether or not the full content of the email bounce is included in webhook POST.",
						MarkdownDescription: "Specifies whether or not the full content of the email bounce is included in webhook POST.",
					},
				},
				CustomType: BounceTriggerType{
					ObjectType: types.ObjectType{
						AttrTypes: BounceTriggerValue{}.AttributeTypes(ctx),
					},
				},
				Computed:            true,
				Description:         "Bounce trigger settings.",
				MarkdownDescription: "Bounce trigger settings.",
			},
			"click_trigger": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"enabled": schema.BoolAttribute{
						Computed:            true,
						Description:         "Specifies whether or not click webhook is enabled.",
						MarkdownDescription: "Specifies whether or not click webhook is enabled.",
					},
				},
				CustomType: ClickTriggerType{
					ObjectType: types.ObjectType{
						AttrTypes: ClickTriggerValue{}.AttributeTypes(ctx),
					},
				},
				Computed:            true,
				Description:         "Click trigger settings.",
				MarkdownDescription: "Click trigger settings.",
			},
			"delivery_trigger": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"enabled": schema.BoolAttribute{
						Computed:            true,
						Description:         "Specifies whether or not delivery webhook is enabled.",
						MarkdownDescription: "Specifies whether or not delivery webhook is enabled.",
					},
				},
				CustomType: DeliveryTriggerType{
					ObjectType: types.ObjectType{
						AttrTypes: DeliveryTriggerValue{}.AttributeTypes(ctx),
					},
				},
				Computed:            true,
				Description:         "Delivery trigger settings.",
				MarkdownDescription: "Delivery trigger settings.",
			},
			"http_auth": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"password": schema.StringAttribute{
						Computed:            true,
						Sensitive:           true,
						Description:         "If present, HTTP Auth password.",
						MarkdownDescription: "If present, HTTP Auth password.",
					},
					"username": schema.StringAttribute{
						Computed:            true,
						Description:         "If present, HTTP Auth username.",
						MarkdownDescription: "If present, HTTP Auth username.",
					},
				},
				CustomType: HttpAuthType{
					ObjectType: types.ObjectType{
						AttrTypes: HttpAuthValue{}.AttributeTypes(ctx),
					},
				},
				Computed:            true,
				Description:         "Optional HTTP Auth credentials for the webhook.",
				MarkdownDescription: "Optional HTTP Auth credentials for the webhook.",
			},
			"http_headers": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"name": schema.StringAttribute{
							Computed:            true,
							Description:         "Name of HTTP header.",
							MarkdownDescription: "Name of HTTP header.",
						},
						"value": schema.StringAttribute{
							Computed:            true,
							Description:         "Value of HTTP header.",
							MarkdownDescription: "Value of HTTP header.",
						},
					},
					CustomType: HttpHeadersType{
						ObjectType: types.ObjectType{
							AttrTypes: HttpHeadersValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed:            true,
				Description:         "List of custom headers included.",
				MarkdownDescription: "List of custom headers included.",
			},
			"id": schema.StringAttribute{
				Required:            true,
				Description:         "ID of webhook.",
				MarkdownDescription: "ID of webhook.",
			},
			"message_stream": schema.StringAttribute{
				Computed:            true,
				Description:         "The stream this webhook is associated with. If no MessageStream is provided, the default transactional stream outbound will be used.",
				MarkdownDescription: "The stream this webhook is associated with. If no MessageStream is provided, the default transactional stream outbound will be used.",
			},
			"open_trigger": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"enabled": schema.BoolAttribute{
						Computed:            true,
						Description:         "Specifies whether or not open webhook is enabled.",
						MarkdownDescription: "Specifies whether or not open webhook is enabled.",
					},
					"post_first_open_only": schema.BoolAttribute{
						Computed:            true,
						Description:         "If enabled, open webhook will only POST on first open.",
						MarkdownDescription: "If enabled, open webhook will only POST on first open.",
					},
				},
				CustomType: OpenTriggerType{
					ObjectType: types.ObjectType{
						AttrTypes: OpenTriggerValue{}.AttributeTypes(ctx),
					},
				},
				Computed:            true,
				Description:         "Open trigger settings.",
				MarkdownDescription: "Open trigger settings.",
			},
			"server_api_token": schema.StringAttribute{
				Required:            true,
				Sensitive:           true,
				Description:         "The Server API token to use for API requests.",
				MarkdownDescription: "The Server API token to use for API requests.",
			},
			"spam_complaint_trigger": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"enabled": schema.BoolAttribute{
						Computed:            true,
						Description:         "Specifies whether or not spam complaint webhook is enabled.",
						MarkdownDescription: "Specifies whether or not spam complaint webhook is enabled.",
					},
					"include_content": schema.BoolAttribute{
						Computed:            true,
						Description:         "Specifies whether or not the full content of the spam complaint is included in webhook POST.",
						MarkdownDescription: "Specifies whether or not the full content of the spam complaint is included in webhook POST.",
					},
				},
				CustomType: SpamComplaintTriggerType{
					ObjectType: types.ObjectType{
						AttrTypes: SpamComplaintTriggerValue{}.AttributeTypes(ctx),
					},
				},
				Computed:            true,
				Description:         "Spam complaint trigger settings.",
				MarkdownDescription: "Spam complaint trigger settings.",
			},
			"subscription_change_trigger": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"enabled": schema.BoolAttribute{
						Computed:            true,
						Description:         "Specifies whether or not subscription change webhook is enabled.",
						MarkdownDescription: "Specifies whether or not subscription change webhook is enabled.",
					},
				},
				CustomType: SubscriptionChangeTriggerType{
					ObjectType: types.ObjectType{
						AttrTypes: SubscriptionChangeTriggerValue{}.AttributeTypes(ctx),
					},
				},
				Computed:            true,
				Description:         "Subscription change trigger settings.",
				MarkdownDescription: "Subscription change trigger settings.",
			},
			"url": schema.StringAttribute{
				Computed:            true,
				Description:         "Your webhook URL.",
				MarkdownDescription: "Your webhook URL.",
			},
		},
	}
}

type WebhookModel struct {
	BounceTrigger             BounceTriggerValue             `tfsdk:"bounce_trigger"`
	ClickTrigger              ClickTriggerValue              `tfsdk:"click_trigger"`
	DeliveryTrigger           DeliveryTriggerValue           `tfsdk:"delivery_trigger"`
	HttpAuth                  HttpAuthValue                  `tfsdk:"http_auth"`
	HttpHeaders               types.List                     `tfsdk:"http_headers"`
	Id                        types.String                   `tfsdk:"id"`
	MessageStream             types.String                   `tfsdk:"message_stream"`
	OpenTrigger               OpenTriggerValue               `tfsdk:"open_trigger"`
	ServerApiToken            types.String                   `tfsdk:"server_api_token"`
	SpamComplaintTrigger      SpamComplaintTriggerValue      `tfsdk:"spam_complaint_trigger"`
	SubscriptionChangeTrigger SubscriptionChangeTriggerValue `tfsdk:"subscription_change_trigger"`
	Url                       types.String                   `tfsdk:"url"`
}

var _ basetypes.ObjectTypable = BounceTriggerType{}

type BounceTriggerType struct {
	basetypes.ObjectType
}

func (t BounceTriggerType) Equal(o attr.Type) bool {
	other, ok := o.(BounceTriggerType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t BounceTriggerType) String() string {
	return "BounceTriggerType"
}

func (t BounceTriggerType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return nil, diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	includeContentAttribute, ok := attributes["include_content"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`include_content is missing from object`)

		return nil, diags
	}

	includeContentVal, ok := includeContentAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`include_content expected to be basetypes.BoolValue, was: %T`, includeContentAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return BounceTriggerValue{
		Enabled:        enabledVal,
		IncludeContent: includeContentVal,
		state:          attr.ValueStateKnown,
	}, diags
}

func NewBounceTriggerValueNull() BounceTriggerValue {
	return BounceTriggerValue{
		state: attr.ValueStateNull,
	}
}

func NewBounceTriggerValueUnknown() BounceTriggerValue {
	return BounceTriggerValue{
		state: attr.ValueStateUnknown,
	}
}

func NewBounceTriggerValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (BounceTriggerValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing BounceTriggerValue Attribute Value",
				"While creating a BounceTriggerValue value, a missing attribute value was detected. "+
					"A BounceTriggerValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("BounceTriggerValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid BounceTriggerValue Attribute Type",
				"While creating a BounceTriggerValue value, an invalid attribute value was detected. "+
					"A BounceTriggerValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("BounceTriggerValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("BounceTriggerValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra BounceTriggerValue Attribute Value",
				"While creating a BounceTriggerValue value, an extra attribute value was detected. "+
					"A BounceTriggerValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra BounceTriggerValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewBounceTriggerValueUnknown(), diags
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return NewBounceTriggerValueUnknown(), diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	includeContentAttribute, ok := attributes["include_content"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`include_content is missing from object`)

		return NewBounceTriggerValueUnknown(), diags
	}

	includeContentVal, ok := includeContentAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`include_content expected to be basetypes.BoolValue, was: %T`, includeContentAttribute))
	}

	if diags.HasError() {
		return NewBounceTriggerValueUnknown(), diags
	}

	return BounceTriggerValue{
		Enabled:        enabledVal,
		IncludeContent: includeContentVal,
		state:          attr.ValueStateKnown,
	}, diags
}

func NewBounceTriggerValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) BounceTriggerValue {
	object, diags := NewBounceTriggerValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewBounceTriggerValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t BounceTriggerType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewBounceTriggerValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewBounceTriggerValueUnknown(), nil
	}

	if in.IsNull() {
		return NewBounceTriggerValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewBounceTriggerValueMust(BounceTriggerValue{}.AttributeTypes(ctx), attributes), nil
}

func (t BounceTriggerType) ValueType(ctx context.Context) attr.Value {
	return BounceTriggerValue{}
}

var _ basetypes.ObjectValuable = BounceTriggerValue{}

type BounceTriggerValue struct {
	Enabled        basetypes.BoolValue `tfsdk:"enabled"`
	IncludeContent basetypes.BoolValue `tfsdk:"include_content"`
	state          attr.ValueState
}

func (v BounceTriggerValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["include_content"] = basetypes.BoolType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Enabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["enabled"] = val

		val, err = v.IncludeContent.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["include_content"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v BounceTriggerValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v BounceTriggerValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v BounceTriggerValue) String() string {
	return "BounceTriggerValue"
}

func (v BounceTriggerValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"enabled":         basetypes.BoolType{},
		"include_content": basetypes.BoolType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"enabled":         v.Enabled,
			"include_content": v.IncludeContent,
		})

	return objVal, diags
}

func (v BounceTriggerValue) Equal(o attr.Value) bool {
	other, ok := o.(BounceTriggerValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Enabled.Equal(other.Enabled) {
		return false
	}

	if !v.IncludeContent.Equal(other.IncludeContent) {
		return false
	}

	return true
}

func (v BounceTriggerValue) Type(ctx context.Context) attr.Type {
	return BounceTriggerType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v BounceTriggerValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"enabled":         basetypes.BoolType{},
		"include_content": basetypes.BoolType{},
	}
}

var _ basetypes.ObjectTypable = ClickTriggerType{}

type ClickTriggerType struct {
	basetypes.ObjectType
}

func (t ClickTriggerType) Equal(o attr.Type) bool {
	other, ok := o.(ClickTriggerType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ClickTriggerType) String() string {
	return "ClickTriggerType"
}

func (t ClickTriggerType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return nil, diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ClickTriggerValue{
		Enabled: enabledVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewClickTriggerValueNull() ClickTriggerValue {
	return ClickTriggerValue{
		state: attr.ValueStateNull,
	}
}

func NewClickTriggerValueUnknown() ClickTriggerValue {
	return ClickTriggerValue{
		state: attr.ValueStateUnknown,
	}
}

func NewClickTriggerValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ClickTriggerValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ClickTriggerValue Attribute Value",
				"While creating a ClickTriggerValue value, a missing attribute value was detected. "+
					"A ClickTriggerValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ClickTriggerValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ClickTriggerValue Attribute Type",
				"While creating a ClickTriggerValue value, an invalid attribute value was detected. "+
					"A ClickTriggerValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ClickTriggerValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ClickTriggerValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ClickTriggerValue Attribute Value",
				"While creating a ClickTriggerValue value, an extra attribute value was detected. "+
					"A ClickTriggerValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ClickTriggerValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewClickTriggerValueUnknown(), diags
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return NewClickTriggerValueUnknown(), diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	if diags.HasError() {
		return NewClickTriggerValueUnknown(), diags
	}

	return ClickTriggerValue{
		Enabled: enabledVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewClickTriggerValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ClickTriggerValue {
	object, diags := NewClickTriggerValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewClickTriggerValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ClickTriggerType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewClickTriggerValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewClickTriggerValueUnknown(), nil
	}

	if in.IsNull() {
		return NewClickTriggerValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewClickTriggerValueMust(ClickTriggerValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ClickTriggerType) ValueType(ctx context.Context) attr.Value {
	return ClickTriggerValue{}
}

var _ basetypes.ObjectValuable = ClickTriggerValue{}

type ClickTriggerValue struct {
	Enabled basetypes.BoolValue `tfsdk:"enabled"`
	state   attr.ValueState
}

func (v ClickTriggerValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 1)

	var val tftypes.Value
	var err error

	attrTypes["enabled"] = basetypes.BoolType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 1)

		val, err = v.Enabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["enabled"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ClickTriggerValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ClickTriggerValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ClickTriggerValue) String() string {
	return "ClickTriggerValue"
}

func (v ClickTriggerValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"enabled": basetypes.BoolType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"enabled": v.Enabled,
		})

	return objVal, diags
}

func (v ClickTriggerValue) Equal(o attr.Value) bool {
	other, ok := o.(ClickTriggerValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Enabled.Equal(other.Enabled) {
		return false
	}

	return true
}

func (v ClickTriggerValue) Type(ctx context.Context) attr.Type {
	return ClickTriggerType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ClickTriggerValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"enabled": basetypes.BoolType{},
	}
}

var _ basetypes.ObjectTypable = DeliveryTriggerType{}

type DeliveryTriggerType struct {
	basetypes.ObjectType
}

func (t DeliveryTriggerType) Equal(o attr.Type) bool {
	other, ok := o.(DeliveryTriggerType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t DeliveryTriggerType) String() string {
	return "DeliveryTriggerType"
}

func (t DeliveryTriggerType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return nil, diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return DeliveryTriggerValue{
		Enabled: enabledVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewDeliveryTriggerValueNull() DeliveryTriggerValue {
	return DeliveryTriggerValue{
		state: attr.ValueStateNull,
	}
}

func NewDeliveryTriggerValueUnknown() DeliveryTriggerValue {
	return DeliveryTriggerValue{
		state: attr.ValueStateUnknown,
	}
}

func NewDeliveryTriggerValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (DeliveryTriggerValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing DeliveryTriggerValue Attribute Value",
				"While creating a DeliveryTriggerValue value, a missing attribute value was detected. "+
					"A DeliveryTriggerValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("DeliveryTriggerValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid DeliveryTriggerValue Attribute Type",
				"While creating a DeliveryTriggerValue value, an invalid attribute value was detected. "+
					"A DeliveryTriggerValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("DeliveryTriggerValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("DeliveryTriggerValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra DeliveryTriggerValue Attribute Value",
				"While creating a DeliveryTriggerValue value, an extra attribute value was detected. "+
					"A DeliveryTriggerValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra DeliveryTriggerValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewDeliveryTriggerValueUnknown(), diags
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return NewDeliveryTriggerValueUnknown(), diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	if diags.HasError() {
		return NewDeliveryTriggerValueUnknown(), diags
	}

	return DeliveryTriggerValue{
		Enabled: enabledVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewDeliveryTriggerValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) DeliveryTriggerValue {
	object, diags := NewDeliveryTriggerValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewDeliveryTriggerValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t DeliveryTriggerType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewDeliveryTriggerValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewDeliveryTriggerValueUnknown(), nil
	}

	if in.IsNull() {
		return NewDeliveryTriggerValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewDeliveryTriggerValueMust(DeliveryTriggerValue{}.AttributeTypes(ctx), attributes), nil
}

func (t DeliveryTriggerType) ValueType(ctx context.Context) attr.Value {
	return DeliveryTriggerValue{}
}

var _ basetypes.ObjectValuable = DeliveryTriggerValue{}

type DeliveryTriggerValue struct {
	Enabled basetypes.BoolValue `tfsdk:"enabled"`
	state   attr.ValueState
}

func (v DeliveryTriggerValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 1)

	var val tftypes.Value
	var err error

	attrTypes["enabled"] = basetypes.BoolType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 1)

		val, err = v.Enabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["enabled"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v DeliveryTriggerValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v DeliveryTriggerValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v DeliveryTriggerValue) String() string {
	return "DeliveryTriggerValue"
}

func (v DeliveryTriggerValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"enabled": basetypes.BoolType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"enabled": v.Enabled,
		})

	return objVal, diags
}

func (v DeliveryTriggerValue) Equal(o attr.Value) bool {
	other, ok := o.(DeliveryTriggerValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Enabled.Equal(other.Enabled) {
		return false
	}

	return true
}

func (v DeliveryTriggerValue) Type(ctx context.Context) attr.Type {
	return DeliveryTriggerType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v DeliveryTriggerValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"enabled": basetypes.BoolType{},
	}
}

var _ basetypes.ObjectTypable = HttpAuthType{}

type HttpAuthType struct {
	basetypes.ObjectType
}

func (t HttpAuthType) Equal(o attr.Type) bool {
	other, ok := o.(HttpAuthType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t HttpAuthType) String() string {
	return "HttpAuthType"
}

func (t HttpAuthType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	passwordAttribute, ok := attributes["password"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`password is missing from object`)

		return nil, diags
	}

	passwordVal, ok := passwordAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`password expected to be basetypes.StringValue, was: %T`, passwordAttribute))
	}

	usernameAttribute, ok := attributes["username"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`username is missing from object`)

		return nil, diags
	}

	usernameVal, ok := usernameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`username expected to be basetypes.StringValue, was: %T`, usernameAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return HttpAuthValue{
		Password: passwordVal,
		Username: usernameVal,
		state:    attr.ValueStateKnown,
	}, diags
}

func NewHttpAuthValueNull() HttpAuthValue {
	return HttpAuthValue{
		state: attr.ValueStateNull,
	}
}

func NewHttpAuthValueUnknown() HttpAuthValue {
	return HttpAuthValue{
		state: attr.ValueStateUnknown,
	}
}

func NewHttpAuthValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (HttpAuthValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing HttpAuthValue Attribute Value",
				"While creating a HttpAuthValue value, a missing attribute value was detected. "+
					"A HttpAuthValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("HttpAuthValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid HttpAuthValue Attribute Type",
				"While creating a HttpAuthValue value, an invalid attribute value was detected. "+
					"A HttpAuthValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("HttpAuthValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("HttpAuthValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra HttpAuthValue Attribute Value",
				"While creating a HttpAuthValue value, an extra attribute value was detected. "+
					"A HttpAuthValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra HttpAuthValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewHttpAuthValueUnknown(), diags
	}

	passwordAttribute, ok := attributes["password"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`password is missing from object`)

		return NewHttpAuthValueUnknown(), diags
	}

	passwordVal, ok := passwordAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`password expected to be basetypes.StringValue, was: %T`, passwordAttribute))
	}

	usernameAttribute, ok := attributes["username"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`username is missing from object`)

		return NewHttpAuthValueUnknown(), diags
	}

	usernameVal, ok := usernameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`username expected to be basetypes.StringValue, was: %T`, usernameAttribute))
	}

	if diags.HasError() {
		return NewHttpAuthValueUnknown(), diags
	}

	return HttpAuthValue{
		Password: passwordVal,
		Username: usernameVal,
		state:    attr.ValueStateKnown,
	}, diags
}

func NewHttpAuthValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) HttpAuthValue {
	object, diags := NewHttpAuthValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewHttpAuthValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t HttpAuthType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewHttpAuthValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewHttpAuthValueUnknown(), nil
	}

	if in.IsNull() {
		return NewHttpAuthValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewHttpAuthValueMust(HttpAuthValue{}.AttributeTypes(ctx), attributes), nil
}

func (t HttpAuthType) ValueType(ctx context.Context) attr.Value {
	return HttpAuthValue{}
}

var _ basetypes.ObjectValuable = HttpAuthValue{}

type HttpAuthValue struct {
	Password basetypes.StringValue `tfsdk:"password"`
	Username basetypes.StringValue `tfsdk:"username"`
	state    attr.ValueState
}

func (v HttpAuthValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["password"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["username"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Password.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["password"] = val

		val, err = v.Username.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["username"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v HttpAuthValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v HttpAuthValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v HttpAuthValue) String() string {
	return "HttpAuthValue"
}

func (v HttpAuthValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"password": basetypes.StringType{},
		"username": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"password": v.Password,
			"username": v.Username,
		})

	return objVal, diags
}

func (v HttpAuthValue) Equal(o attr.Value) bool {
	other, ok := o.(HttpAuthValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Password.Equal(other.Password) {
		return false
	}

	if !v.Username.Equal(other.Username) {
		return false
	}

	return true
}

func (v HttpAuthValue) Type(ctx context.Context) attr.Type {
	return HttpAuthType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v HttpAuthValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"password": basetypes.StringType{},
		"username": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = HttpHeadersType{}

type HttpHeadersType struct {
	basetypes.ObjectType
}

func (t HttpHeadersType) Equal(o attr.Type) bool {
	other, ok := o.(HttpHeadersType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t HttpHeadersType) String() string {
	return "HttpHeadersType"
}

func (t HttpHeadersType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	valueAttribute, ok := attributes["value"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`value is missing from object`)

		return nil, diags
	}

	valueVal, ok := valueAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`value expected to be basetypes.StringValue, was: %T`, valueAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return HttpHeadersValue{
		Name:  nameVal,
		Value: valueVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewHttpHeadersValueNull() HttpHeadersValue {
	return HttpHeadersValue{
		state: attr.ValueStateNull,
	}
}

func NewHttpHeadersValueUnknown() HttpHeadersValue {
	return HttpHeadersValue{
		state: attr.ValueStateUnknown,
	}
}

func NewHttpHeadersValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (HttpHeadersValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing HttpHeadersValue Attribute Value",
				"While creating a HttpHeadersValue value, a missing attribute value was detected. "+
					"A HttpHeadersValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("HttpHeadersValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid HttpHeadersValue Attribute Type",
				"While creating a HttpHeadersValue value, an invalid attribute value was detected. "+
					"A HttpHeadersValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("HttpHeadersValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("HttpHeadersValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra HttpHeadersValue Attribute Value",
				"While creating a HttpHeadersValue value, an extra attribute value was detected. "+
					"A HttpHeadersValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra HttpHeadersValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewHttpHeadersValueUnknown(), diags
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewHttpHeadersValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	valueAttribute, ok := attributes["value"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`value is missing from object`)

		return NewHttpHeadersValueUnknown(), diags
	}

	valueVal, ok := valueAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`value expected to be basetypes.StringValue, was: %T`, valueAttribute))
	}

	if diags.HasError() {
		return NewHttpHeadersValueUnknown(), diags
	}

	return HttpHeadersValue{
		Name:  nameVal,
		Value: valueVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewHttpHeadersValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) HttpHeadersValue {
	object, diags := NewHttpHeadersValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewHttpHeadersValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t HttpHeadersType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewHttpHeadersValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewHttpHeadersValueUnknown(), nil
	}

	if in.IsNull() {
		return NewHttpHeadersValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewHttpHeadersValueMust(HttpHeadersValue{}.AttributeTypes(ctx), attributes), nil
}

func (t HttpHeadersType) ValueType(ctx context.Context) attr.Value {
	return HttpHeadersValue{}
}

var _ basetypes.ObjectValuable = HttpHeadersValue{}

type HttpHeadersValue struct {
	Name  basetypes.StringValue `tfsdk:"name"`
	Value basetypes.StringValue `tfsdk:"value"`
	state attr.ValueState
}

func (v HttpHeadersValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["value"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Value.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["value"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v HttpHeadersValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v HttpHeadersValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v HttpHeadersValue) String() string {
	return "HttpHeadersValue"
}

func (v HttpHeadersValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"name":  basetypes.StringType{},
		"value": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"name":  v.Name,
			"value": v.Value,
		})

	return objVal, diags
}

func (v HttpHeadersValue) Equal(o attr.Value) bool {
	other, ok := o.(HttpHeadersValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Value.Equal(other.Value) {
		return false
	}

	return true
}

func (v HttpHeadersValue) Type(ctx context.Context) attr.Type {
	return HttpHeadersType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v HttpHeadersValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"name":  basetypes.StringType{},
		"value": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = OpenTriggerType{}

type OpenTriggerType struct {
	basetypes.ObjectType
}

func (t OpenTriggerType) Equal(o attr.Type) bool {
	other, ok := o.(OpenTriggerType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t OpenTriggerType) String() string {
	return "OpenTriggerType"
}

func (t OpenTriggerType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return nil, diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	postFirstOpenOnlyAttribute, ok := attributes["post_first_open_only"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`post_first_open_only is missing from object`)

		return nil, diags
	}

	postFirstOpenOnlyVal, ok := postFirstOpenOnlyAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`post_first_open_only expected to be basetypes.BoolValue, was: %T`, postFirstOpenOnlyAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return OpenTriggerValue{
		Enabled:           enabledVal,
		PostFirstOpenOnly: postFirstOpenOnlyVal,
		state:             attr.ValueStateKnown,
	}, diags
}

func NewOpenTriggerValueNull() OpenTriggerValue {
	return OpenTriggerValue{
		state: attr.ValueStateNull,
	}
}

func NewOpenTriggerValueUnknown() OpenTriggerValue {
	return OpenTriggerValue{
		state: attr.ValueStateUnknown,
	}
}

func NewOpenTriggerValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (OpenTriggerValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing OpenTriggerValue Attribute Value",
				"While creating a OpenTriggerValue value, a missing attribute value was detected. "+
					"A OpenTriggerValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("OpenTriggerValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid OpenTriggerValue Attribute Type",
				"While creating a OpenTriggerValue value, an invalid attribute value was detected. "+
					"A OpenTriggerValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("OpenTriggerValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("OpenTriggerValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra OpenTriggerValue Attribute Value",
				"While creating a OpenTriggerValue value, an extra attribute value was detected. "+
					"A OpenTriggerValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra OpenTriggerValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewOpenTriggerValueUnknown(), diags
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return NewOpenTriggerValueUnknown(), diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	postFirstOpenOnlyAttribute, ok := attributes["post_first_open_only"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`post_first_open_only is missing from object`)

		return NewOpenTriggerValueUnknown(), diags
	}

	postFirstOpenOnlyVal, ok := postFirstOpenOnlyAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`post_first_open_only expected to be basetypes.BoolValue, was: %T`, postFirstOpenOnlyAttribute))
	}

	if diags.HasError() {
		return NewOpenTriggerValueUnknown(), diags
	}

	return OpenTriggerValue{
		Enabled:           enabledVal,
		PostFirstOpenOnly: postFirstOpenOnlyVal,
		state:             attr.ValueStateKnown,
	}, diags
}

func NewOpenTriggerValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) OpenTriggerValue {
	object, diags := NewOpenTriggerValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewOpenTriggerValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t OpenTriggerType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewOpenTriggerValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewOpenTriggerValueUnknown(), nil
	}

	if in.IsNull() {
		return NewOpenTriggerValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewOpenTriggerValueMust(OpenTriggerValue{}.AttributeTypes(ctx), attributes), nil
}

func (t OpenTriggerType) ValueType(ctx context.Context) attr.Value {
	return OpenTriggerValue{}
}

var _ basetypes.ObjectValuable = OpenTriggerValue{}

type OpenTriggerValue struct {
	Enabled           basetypes.BoolValue `tfsdk:"enabled"`
	PostFirstOpenOnly basetypes.BoolValue `tfsdk:"post_first_open_only"`
	state             attr.ValueState
}

func (v OpenTriggerValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["post_first_open_only"] = basetypes.BoolType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Enabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["enabled"] = val

		val, err = v.PostFirstOpenOnly.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["post_first_open_only"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v OpenTriggerValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v OpenTriggerValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v OpenTriggerValue) String() string {
	return "OpenTriggerValue"
}

func (v OpenTriggerValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"enabled":              basetypes.BoolType{},
		"post_first_open_only": basetypes.BoolType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"enabled":              v.Enabled,
			"post_first_open_only": v.PostFirstOpenOnly,
		})

	return objVal, diags
}

func (v OpenTriggerValue) Equal(o attr.Value) bool {
	other, ok := o.(OpenTriggerValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Enabled.Equal(other.Enabled) {
		return false
	}

	if !v.PostFirstOpenOnly.Equal(other.PostFirstOpenOnly) {
		return false
	}

	return true
}

func (v OpenTriggerValue) Type(ctx context.Context) attr.Type {
	return OpenTriggerType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v OpenTriggerValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"enabled":              basetypes.BoolType{},
		"post_first_open_only": basetypes.BoolType{},
	}
}

var _ basetypes.ObjectTypable = SpamComplaintTriggerType{}

type SpamComplaintTriggerType struct {
	basetypes.ObjectType
}

func (t SpamComplaintTriggerType) Equal(o attr.Type) bool {
	other, ok := o.(SpamComplaintTriggerType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SpamComplaintTriggerType) String() string {
	return "SpamComplaintTriggerType"
}

func (t SpamComplaintTriggerType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return nil, diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	includeContentAttribute, ok := attributes["include_content"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`include_content is missing from object`)

		return nil, diags
	}

	includeContentVal, ok := includeContentAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`include_content expected to be basetypes.BoolValue, was: %T`, includeContentAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return SpamComplaintTriggerValue{
		Enabled:        enabledVal,
		IncludeContent: includeContentVal,
		state:          attr.ValueStateKnown,
	}, diags
}

func NewSpamComplaintTriggerValueNull() SpamComplaintTriggerValue {
	return SpamComplaintTriggerValue{
		state: attr.ValueStateNull,
	}
}

func NewSpamComplaintTriggerValueUnknown() SpamComplaintTriggerValue {
	return SpamComplaintTriggerValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSpamComplaintTriggerValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SpamComplaintTriggerValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SpamComplaintTriggerValue Attribute Value",
				"While creating a SpamComplaintTriggerValue value, a missing attribute value was detected. "+
					"A SpamComplaintTriggerValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SpamComplaintTriggerValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SpamComplaintTriggerValue Attribute Type",
				"While creating a SpamComplaintTriggerValue value, an invalid attribute value was detected. "+
					"A SpamComplaintTriggerValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SpamComplaintTriggerValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SpamComplaintTriggerValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SpamComplaintTriggerValue Attribute Value",
				"While creating a SpamComplaintTriggerValue value, an extra attribute value was detected. "+
					"A SpamComplaintTriggerValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SpamComplaintTriggerValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSpamComplaintTriggerValueUnknown(), diags
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return NewSpamComplaintTriggerValueUnknown(), diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	includeContentAttribute, ok := attributes["include_content"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`include_content is missing from object`)

		return NewSpamComplaintTriggerValueUnknown(), diags
	}

	includeContentVal, ok := includeContentAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`include_content expected to be basetypes.BoolValue, was: %T`, includeContentAttribute))
	}

	if diags.HasError() {
		return NewSpamComplaintTriggerValueUnknown(), diags
	}

	return SpamComplaintTriggerValue{
		Enabled:        enabledVal,
		IncludeContent: includeContentVal,
		state:          attr.ValueStateKnown,
	}, diags
}

func NewSpamComplaintTriggerValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SpamComplaintTriggerValue {
	object, diags := NewSpamComplaintTriggerValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSpamComplaintTriggerValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SpamComplaintTriggerType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSpamComplaintTriggerValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSpamComplaintTriggerValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSpamComplaintTriggerValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSpamComplaintTriggerValueMust(SpamComplaintTriggerValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SpamComplaintTriggerType) ValueType(ctx context.Context) attr.Value {
	return SpamComplaintTriggerValue{}
}

var _ basetypes.ObjectValuable = SpamComplaintTriggerValue{}

type SpamComplaintTriggerValue struct {
	Enabled        basetypes.BoolValue `tfsdk:"enabled"`
	IncludeContent basetypes.BoolValue `tfsdk:"include_content"`
	state          attr.ValueState
}

func (v SpamComplaintTriggerValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["include_content"] = basetypes.BoolType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Enabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["enabled"] = val

		val, err = v.IncludeContent.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["include_content"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SpamComplaintTriggerValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SpamComplaintTriggerValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SpamComplaintTriggerValue) String() string {
	return "SpamComplaintTriggerValue"
}

func (v SpamComplaintTriggerValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"enabled":         basetypes.BoolType{},
		"include_content": basetypes.BoolType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"enabled":         v.Enabled,
			"include_content": v.IncludeContent,
		})

	return objVal, diags
}

func (v SpamComplaintTriggerValue) Equal(o attr.Value) bool {
	other, ok := o.(SpamComplaintTriggerValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Enabled.Equal(other.Enabled) {
		return false
	}

	if !v.IncludeContent.Equal(other.IncludeContent) {
		return false
	}

	return true
}

func (v SpamComplaintTriggerValue) Type(ctx context.Context) attr.Type {
	return SpamComplaintTriggerType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SpamComplaintTriggerValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"enabled":         basetypes.BoolType{},
		"include_content": basetypes.BoolType{},
	}
}

var _ basetypes.ObjectTypable = SubscriptionChangeTriggerType{}

type SubscriptionChangeTriggerType struct {
	basetypes.ObjectType
}

func (t SubscriptionChangeTriggerType) Equal(o attr.Type) bool {
	other, ok := o.(SubscriptionChangeTriggerType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SubscriptionChangeTriggerType) String() string {
	return "SubscriptionChangeTriggerType"
}

func (t SubscriptionChangeTriggerType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return nil, diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return SubscriptionChangeTriggerValue{
		Enabled: enabledVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewSubscriptionChangeTriggerValueNull() SubscriptionChangeTriggerValue {
	return SubscriptionChangeTriggerValue{
		state: attr.ValueStateNull,
	}
}

func NewSubscriptionChangeTriggerValueUnknown() SubscriptionChangeTriggerValue {
	return SubscriptionChangeTriggerValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSubscriptionChangeTriggerValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SubscriptionChangeTriggerValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SubscriptionChangeTriggerValue Attribute Value",
				"While creating a SubscriptionChangeTriggerValue value, a missing attribute value was detected. "+
					"A SubscriptionChangeTriggerValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SubscriptionChangeTriggerValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SubscriptionChangeTriggerValue Attribute Type",
				"While creating a SubscriptionChangeTriggerValue value, an invalid attribute value was detected. "+
					"A SubscriptionChangeTriggerValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SubscriptionChangeTriggerValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SubscriptionChangeTriggerValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SubscriptionChangeTriggerValue Attribute Value",
				"While creating a SubscriptionChangeTriggerValue value, an extra attribute value was detected. "+
					"A SubscriptionChangeTriggerValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SubscriptionChangeTriggerValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSubscriptionChangeTriggerValueUnknown(), diags
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return NewSubscriptionChangeTriggerValueUnknown(), diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	if diags.HasError() {
		return NewSubscriptionChangeTriggerValueUnknown(), diags
	}

	return SubscriptionChangeTriggerValue{
		Enabled: enabledVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewSubscriptionChangeTriggerValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SubscriptionChangeTriggerValue {
	object, diags := NewSubscriptionChangeTriggerValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSubscriptionChangeTriggerValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SubscriptionChangeTriggerType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSubscriptionChangeTriggerValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSubscriptionChangeTriggerValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSubscriptionChangeTriggerValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSubscriptionChangeTriggerValueMust(SubscriptionChangeTriggerValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SubscriptionChangeTriggerType) ValueType(ctx context.Context) attr.Value {
	return SubscriptionChangeTriggerValue{}
}

var _ basetypes.ObjectValuable = SubscriptionChangeTriggerValue{}

type SubscriptionChangeTriggerValue struct {
	Enabled basetypes.BoolValue `tfsdk:"enabled"`
	state   attr.ValueState
}

func (v SubscriptionChangeTriggerValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 1)

	var val tftypes.Value
	var err error

	attrTypes["enabled"] = basetypes.BoolType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 1)

		val, err = v.Enabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["enabled"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SubscriptionChangeTriggerValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SubscriptionChangeTriggerValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SubscriptionChangeTriggerValue) String() string {
	return "SubscriptionChangeTriggerValue"
}

func (v SubscriptionChangeTriggerValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"enabled": basetypes.BoolType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"enabled": v.Enabled,
		})

	return objVal, diags
}

func (v SubscriptionChangeTriggerValue) Equal(o attr.Value) bool {
	other, ok := o.(SubscriptionChangeTriggerValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Enabled.Equal(other.Enabled) {
		return false
	}

	return true
}

func (v SubscriptionChangeTriggerValue) Type(ctx context.Context) attr.Type {
	return SubscriptionChangeTriggerType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SubscriptionChangeTriggerValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"enabled": basetypes.BoolType{},
	}
}
