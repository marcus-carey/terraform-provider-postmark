// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_server

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func ServerDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"api_tokens": schema.ListAttribute{
				ElementType:         types.StringType,
				Computed:            true,
				Sensitive:           true,
				Description:         "List of API tokens associated with server.",
				MarkdownDescription: "List of API tokens associated with server.",
			},
			"color": schema.StringAttribute{
				Computed:            true,
				Description:         "Color of the server in the server list, for quick identification. Possible values - 'purple', 'blue', 'turquoise', 'green', 'red', 'yellow', 'grey', 'orange'",
				MarkdownDescription: "Color of the server in the server list, for quick identification. Possible values - 'purple', 'blue', 'turquoise', 'green', 'red', 'yellow', 'grey', 'orange'",
			},
			"delivery_type": schema.StringAttribute{
				Computed:            true,
				Description:         "Specifies the type of environment for your server. Possible options - Live Sandbox. Defaults to Live if not specified. This cannot be changed after the server has been created.",
				MarkdownDescription: "Specifies the type of environment for your server. Possible options - Live Sandbox. Defaults to Live if not specified. This cannot be changed after the server has been created.",
			},
			"enable_smtp_api_error_hooks": schema.BoolAttribute{
				Computed:            true,
				Description:         "Specifies whether or not SMTP API Errors will be included with bounce webhooks.",
				MarkdownDescription: "Specifies whether or not SMTP API Errors will be included with bounce webhooks.",
			},
			"id": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "ID of server",
				MarkdownDescription: "ID of server",
			},
			"inbound_address": schema.StringAttribute{
				Computed:            true,
				Description:         "Inbound email address",
				MarkdownDescription: "Inbound email address",
			},
			"inbound_domain": schema.StringAttribute{
				Computed:            true,
				Description:         "Inbound domain for MX setup.",
				MarkdownDescription: "Inbound domain for MX setup.",
			},
			"inbound_hash": schema.StringAttribute{
				Computed:            true,
				Sensitive:           true,
				Description:         "The inbound hash of your inbound email address.",
				MarkdownDescription: "The inbound hash of your inbound email address.",
			},
			"inbound_hook_url": schema.StringAttribute{
				Computed:            true,
				Description:         "URL to POST to every time an inbound event occurs.",
				MarkdownDescription: "URL to POST to every time an inbound event occurs.",
			},
			"inbound_spam_threshold": schema.Int64Attribute{
				Computed:            true,
				Description:         "The maximum spam score for an inbound message before it's blocked.",
				MarkdownDescription: "The maximum spam score for an inbound message before it's blocked.",
			},
			"include_bounce_content_in_hook": schema.BoolAttribute{
				Computed:            true,
				Description:         "Include bounce content in webhook.",
				MarkdownDescription: "Include bounce content in webhook.",
			},
			"name": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Server name",
				MarkdownDescription: "Server name",
			},
			"post_first_open_only": schema.BoolAttribute{
				Computed:            true,
				Description:         "If set to true, only the first open by a particular recipient will initiate the open webhook. Any subsequent opens of the same email by the same recipient will not initiate the webhook.",
				MarkdownDescription: "If set to true, only the first open by a particular recipient will initiate the open webhook. Any subsequent opens of the same email by the same recipient will not initiate the webhook.",
			},
			"raw_email_enabled": schema.BoolAttribute{
				Computed:            true,
				Description:         "When enabled, the raw email content will be included with inbound webhook payloads under the RawEmail key.",
				MarkdownDescription: "When enabled, the raw email content will be included with inbound webhook payloads under the RawEmail key.",
			},
			"server_link": schema.StringAttribute{
				Computed: true,
			},
			"smtp_api_activated": schema.BoolAttribute{
				Computed:            true,
				Description:         "Specifies whether or not SMTP is enabled on this server.",
				MarkdownDescription: "Specifies whether or not SMTP is enabled on this server.",
			},
			"track_links": schema.StringAttribute{
				Computed:            true,
				Description:         "Indicates if all emails being sent through this server should have link tracking enabled for links in their HTML or Text bodies. Possible options - 'None', 'HtmlAndText', 'HtmlOnly', 'TextOnly'",
				MarkdownDescription: "Indicates if all emails being sent through this server should have link tracking enabled for links in their HTML or Text bodies. Possible options - 'None', 'HtmlAndText', 'HtmlOnly', 'TextOnly'",
			},
			"track_opens": schema.BoolAttribute{
				Computed:            true,
				Description:         "Indicates if all emails being sent through this server have open tracking enabled.",
				MarkdownDescription: "Indicates if all emails being sent through this server have open tracking enabled.",
			},
		},
	}
}

type ServerModel struct {
	ApiTokens                  types.List   `tfsdk:"api_tokens"`
	Color                      types.String `tfsdk:"color"`
	DeliveryType               types.String `tfsdk:"delivery_type"`
	EnableSmtpApiErrorHooks    types.Bool   `tfsdk:"enable_smtp_api_error_hooks"`
	Id                         types.String `tfsdk:"id"`
	InboundAddress             types.String `tfsdk:"inbound_address"`
	InboundDomain              types.String `tfsdk:"inbound_domain"`
	InboundHash                types.String `tfsdk:"inbound_hash"`
	InboundHookUrl             types.String `tfsdk:"inbound_hook_url"`
	InboundSpamThreshold       types.Int64  `tfsdk:"inbound_spam_threshold"`
	IncludeBounceContentInHook types.Bool   `tfsdk:"include_bounce_content_in_hook"`
	Name                       types.String `tfsdk:"name"`
	PostFirstOpenOnly          types.Bool   `tfsdk:"post_first_open_only"`
	RawEmailEnabled            types.Bool   `tfsdk:"raw_email_enabled"`
	ServerLink                 types.String `tfsdk:"server_link"`
	SmtpApiActivated           types.Bool   `tfsdk:"smtp_api_activated"`
	TrackLinks                 types.String `tfsdk:"track_links"`
	TrackOpens                 types.Bool   `tfsdk:"track_opens"`
}
